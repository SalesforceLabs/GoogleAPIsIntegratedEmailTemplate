//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class CalendarEventsJsonResponse {

	public class Reminders {
		public Boolean useDefault {get;set;} 

		public Reminders(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'useDefault') {
							useDefault = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Reminders consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String kind {get;set;} 
	public String etag {get;set;} 
	public String summary {get;set;} 
	public String updated {get;set;} 
	public String timeZone {get;set;} 
	public String accessRole {get;set;} 
	public List<DefaultReminders> defaultReminders {get;set;} 
	public String nextSyncToken {get;set;} 
	public List<Items> items {get;set;} 

	public CalendarEventsJsonResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'kind') {
						kind = parser.getText();
					} else if (text == 'etag') {
						etag = parser.getText();
					} else if (text == 'summary') {
						summary = parser.getText();
					} else if (text == 'updated') {
						updated = parser.getText();
					} else if (text == 'timeZone') {
						timeZone = parser.getText();
					} else if (text == 'accessRole') {
						accessRole = parser.getText();
					} else if (text == 'defaultReminders') {
						defaultReminders = arrayOfDefaultReminders(parser);
					} else if (text == 'nextSyncToken') {
						nextSyncToken = parser.getText();
					} else if (text == 'items') {
						items = arrayOfItems(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'CalendarEventsJsonResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Organizer {
		public String email {get;set;} 
		public String displayName {get;set;} 
		public Boolean self {get;set;} 

		public Organizer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'email') {
							email = parser.getText();
						} else if (text == 'displayName') {
							displayName = parser.getText();
						} else if (text == 'self') {
							self = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Organizer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Start {
		public String dateTime_Z {get;set;} // in json: dateTime

		public Start(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dateTime') {
							dateTime_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Start consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DefaultReminders {

		public DefaultReminders(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'DefaultReminders consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Items {
		public String kind {get;set;} 
		public String etag {get;set;} 
		public String id {get;set;} 
		public String status {get;set;} 
		public String htmlLink {get;set;} 
		public String created {get;set;} 
		public String updated {get;set;} 
		public String summary {get;set;} 
		public Creator creator {get;set;} 
		public Organizer organizer {get;set;} 
		public Start start {get;set;} 
		public Start end_Z {get;set;} // in json: end
		public String iCalUID {get;set;} 
		public Integer sequence {get;set;} 
		public Reminders reminders {get;set;} 
		public String eventType {get;set;} 

		public Items(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'kind') {
							kind = parser.getText();
						} else if (text == 'etag') {
							etag = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'htmlLink') {
							htmlLink = parser.getText();
						} else if (text == 'created') {
							created = parser.getText();
						} else if (text == 'updated') {
							updated = parser.getText();
						} else if (text == 'summary') {
							summary = parser.getText();
						} else if (text == 'creator') {
							creator = new Creator(parser);
						} else if (text == 'organizer') {
							organizer = new Organizer(parser);
						} else if (text == 'start') {
							start = new Start(parser);
						} else if (text == 'end') {
							end_Z = new Start(parser);
						} else if (text == 'iCalUID') {
							iCalUID = parser.getText();
						} else if (text == 'sequence') {
							sequence = parser.getIntegerValue();
						} else if (text == 'reminders') {
							reminders = new Reminders(parser);
						} else if (text == 'eventType') {
							eventType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Creator {
		public String email {get;set;} 

		public Creator(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'email') {
							email = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Creator consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static CalendarEventsJsonResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new CalendarEventsJsonResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<DefaultReminders> arrayOfDefaultReminders(System.JSONParser p) {
        List<DefaultReminders> res = new List<DefaultReminders>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DefaultReminders(p));
        }
        return res;
    }











    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }



}